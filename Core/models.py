from __future__ import unicode_literals

from django.db import models
from django.core.mail import send_mail
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.base_user import AbstractBaseUser
from django.utils.translation import gettext_lazy as _
from django.utils import timezone

from .managers import UserManager


class User(AbstractBaseUser, PermissionsMixin):
    login = models.CharField('–õ–æ–≥–∏–Ω', unique=True, max_length=100)
    name = models.CharField(_('name'), max_length=30, blank=True)
    is_active = models.BooleanField(_('is_active'), default=True)
    is_staff = models.BooleanField(_('is_staff'), default=True)
    login_key = models.CharField('–ö–ª—é—á –≤—Ö–æ–¥–∞ –ø–æ –±–µ–π–¥–∂—É', max_length=30, blank=True, unique=False)
    storeRole = models.CharField('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', max_length=100, default='none')
    backoffice_login = models.CharField('–ö–ª—é—á BackOffice', max_length= 100, default='none')
    bearer_token = models.CharField('Bearer Token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', max_length=1000, default='none')
    
    # –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    #–ü—Ä–∏–Ω—Ç–µ—Ä—ã
    selected_stationary_printer = models.CharField('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä', max_length=100, blank=True, null=True)
    selected_thermo_printer = models.CharField('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä', max_length=100, blank=True, null=True)
    selected_mobile_printer_yellow = models.CharField('–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä —Å –∂–µ–ª—Ç–æ–π –±—É–º–∞–≥–æ–π', max_length=100, blank=True, null=True)
    selected_mobile_printer_white = models.CharField('–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä —Å –±–µ–ª–æ–π –±—É–º–∞–≥–æ–π', max_length=100, blank=True, null=True)
    
    
    
    objects = UserManager()

    USERNAME_FIELD = 'login'
    REQUIRED_FIELDS = ['name']

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')
    def __str__(self):
        return self.name


class ErrorLog(models.Model):
    error_text = models.CharField('–û—à–∏–±–∫–∞', max_length=100)
    timestamp = models.DateTimeField('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏', default= timezone.now)
    
    def __str__(self):
        return f'[{self.timestamp}] {self.error_text}'
    class Meta:
        verbose_name = '–æ—à–∏–±–∫—É'
        verbose_name_plural = '–æ—à–∏–±–∫–∏'
        
        
class HeadMenu(models.Model):
    name = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞', max_length=100)
    url = models.CharField('–°—Å—ã–ª–∫–∞ (–æ—Ç –∫–æ—Ä–Ω—è)', max_length=100)
    title = models.BooleanField('–ó–∞–≥–æ–ª–æ–≤–æ–∫?', default=False)
    gk_name = models.CharField('–ò–º—è –≤ GK', max_length=100)
    icon = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ GMD', max_length=100)
    index = models.CharField('–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞', max_length=100, default='99')
    def __str__(self):
        if self.title:
            x = 'üëë '
        else:
            x = ''
        return f'{x}[{self.gk_name}] {self.name}'
    class Meta:
        verbose_name = '–ø—É–Ω–∫—Ç'
        verbose_name_plural = '–ø—É–Ω–∫—Ç—ã'
        ordering = ['index']
        
        
class DropMenu(models.Model):
    name = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞', max_length=100)
    url = models.CharField('–°—Å—ã–ª–∫–∞ (–æ—Ç –∫–æ—Ä–Ω—è)', max_length=100)
    headmenu = models.ForeignKey(HeadMenu, on_delete=models.CASCADE)
    gk_name = models.CharField('–ò–º—è –≤ GK', max_length=100)
    icon = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ GMD', max_length=100)
    
    def __str__(self):
        return f'[{self.gk_name}] {self.name}'
    class Meta:
        verbose_name = '–ø—É–Ω–∫—Ç'
        verbose_name_plural = '–ø—É–Ω–∫—Ç—ã'
    
    
class Label(models.Model):
    name = models.CharField(max_length=255)
    qr = models.CharField(max_length=255)
    appName = models.CharField(max_length=255)
    printer = models.CharField(max_length=255)
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return self.name
